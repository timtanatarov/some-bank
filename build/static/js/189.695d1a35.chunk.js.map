{"version":3,"file":"static/js/189.695d1a35.chunk.js","mappings":"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","sources":["services/exchangeRatesService/currencyData.ts","shared/BackArrowButton.tsx","shared/ComingSoonModal.tsx","shared/icons/Copy.tsx","shared/CopyButton/index.tsx","shared/InfoTable.tsx","shared/Plate.tsx","shared/cards/Base.tsx","utils/inputFormatters.ts"],"sourcesContent":["import { convertToNumber, formatNumberToSpacingString } from 'src/utils/inputFormatters';\n\nimport China from 'src/images/flags/China.png';\nimport Usa from 'src/images/flags/Usa.png';\nimport Eu from 'src/images/flags/Eu.png';\nimport Rus from 'src/images/flags/Rus.png';\n\nexport type ConverterData = {\n    code: string;\n    rusName: string;\n    buyingRub: number;\n    sellingRub: number;\n};\n\nexport type currencyKeys = keyof typeof currencyData;\n\nexport const currencyData = {\n    EUR: {\n        icon: Eu,\n        name: 'Евро',\n        symbol: '€',\n    },\n    USD: {\n        icon: Usa,\n        name: 'Доллар США',\n        symbol: '$',\n    },\n    CNY: {\n        icon: China,\n        name: 'Китайский юань',\n        symbol: '¥',\n    },\n    RUB: {\n        icon: Rus,\n        name: 'Российский рубль',\n        symbol: '₽',\n    },\n};\n\nexport const getCurrencyName = (code: string) => currencyData[code as keyof typeof currencyData]?.name;\n\nexport const rubData = { code: 'RUB', rusName: getCurrencyName('RUB'), buyingRub: 1, sellingRub: 1 };\n\nexport const convertForward = (\n    amountToConvert: string,\n    fromCurrency: string,\n    toCurrency: string,\n    data: ConverterData[]\n) => {\n    if (fromCurrency === toCurrency) return amountToConvert;\n\n    const value = convertToNumber(amountToConvert);\n    const rubValue = value * (data.find((el) => el.code === fromCurrency)?.buyingRub || 0);\n    const targetData = data.find((el) => el.code === toCurrency);\n    const targetCurrencyValue = rubValue / ((Number(targetData?.buyingRub) + Number(targetData?.sellingRub)) / 2 || 1);\n    return formatNumberToSpacingString(targetCurrencyValue);\n};\n\nexport const convertBackward = (\n    targetConverted: string,\n    fromCurrency: string,\n    toCurrency: string,\n    data: ConverterData[]\n) => {\n    if (fromCurrency === toCurrency) return targetConverted;\n\n    const value = convertToNumber(targetConverted);\n    const targetData = data.find((el) => el.code === toCurrency);\n    const rubValue = ((Number(targetData?.buyingRub) + Number(targetData?.sellingRub)) / 2 || 1) * value;\n    const fromValue = rubValue / (data.find((el) => el.code === fromCurrency)?.buyingRub || Infinity);\n    return formatNumberToSpacingString(fromValue);\n};\n","import { Button, ButtonProps } from '@mui/material';\nimport React from 'react';\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\n\nexport const BackArrowButton = ({ ...props }: ButtonProps) => {\n    return (\n        <Button variant=\"navigation\" startIcon={<ArrowBackIosIcon sx={{ color: '#9E9E9E' }} />} {...props}>\n            Назад\n        </Button>\n    );\n};\n","import { Box, Dialog, IconButton, Paper, Stack, Typography } from '@mui/material';\nimport errorImg from 'src/images/routesError/errorImg.png';\nimport { colors } from 'src/theme';\n\nimport { CloseIcon } from './icons';\n\nexport type ComingSoonModalProps = {\n    isOpen: boolean;\n    onClose: VoidFunction;\n};\nexport const ComingSoonModal = ({ isOpen, onClose }: ComingSoonModalProps) => {\n    return (\n        <Dialog sx={{ zIndex: 100000 }} onClose={onClose} open={isOpen}>\n            <Paper\n                elevation={0}\n                sx={{\n                    height: { tablet: '445px', mobile: 'auto' },\n                    width: { tablet: '416px', mobile: 'auto' },\n                    p: { tablet: '60px 37px', mobile: '60px 37px 50px' },\n                    borderRadius: '4px',\n                }}\n            >\n                <IconButton onClick={onClose} sx={{ position: 'absolute', right: '16px', top: '16px' }}>\n                    <CloseIcon fontSize=\"medium\" />\n                </IconButton>\n                <Stack spacing=\"24px\" alignItems=\"center\" justifyContent=\"center\">\n                    <Box\n                        component=\"img\"\n                        src={errorImg}\n                        sx={{ width: '168px', height: '176px', mb: { tablet: '0', mobile: '8px' } }}\n                    />\n                    <Stack\n                        spacing=\"8px\"\n                        alignItems=\"center\"\n                        sx={{ textAlign: 'center', color: colors.primary, whiteSpace: 'pre' }}\n                    >\n                        <Typography component=\"div\" variant=\"subtitle2Semibold\" sx={{ mb: { tablet: '8px' } }}>\n                            {`Данный раздел находится \\nв стадии разработки.`}\n                        </Typography>\n                        <Typography component=\"div\" variant=\"descriptionRegular\">\n                            {`Приносим свои извинения \\nза доставленные неудобства.`}\n                        </Typography>\n                    </Stack>\n                </Stack>\n            </Paper>\n        </Dialog>\n    );\n};\n","import { createSvgIcon } from '@mui/material/utils';\n\nexport const CopyIcon = createSvgIcon(\n    <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M15.0526 3H5.57895C4.71053 3 4 3.73636 4 4.63636V16.0909H5.57895V4.63636H15.0526V3ZM17.4211 6.27273H8.73684C7.86842 6.27273 7.15789 7.00909 7.15789 7.90909V19.3636C7.15789 20.2636 7.86842 21 8.73684 21H17.4211C18.2895 21 19 20.2636 19 19.3636V7.90909C19 7.00909 18.2895 6.27273 17.4211 6.27273ZM17.4211 19.3636H8.73684V7.90909H17.4211V19.3636Z\"\n        fill=\"#227731\"\n    />,\n\n    'CopyIcon'\n);\n","import { FC, useState } from 'react';\nimport Tooltip from '@mui/material/Tooltip';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport { CopyIcon } from 'src/shared/icons/Copy';\n\ntype CopyButtonProps = {\n    text: string;\n};\n\nexport const CopyButton: FC<CopyButtonProps> = ({ text }) => {\n    const [isTooltipOpen, setIsTooltipOpen] = useState(false);\n    const handleClick = () => {\n        navigator.clipboard.writeText(text);\n        setIsTooltipOpen(true);\n    };\n    const handleTooltipClose = () => {\n        setIsTooltipOpen(false);\n    };\n\n    return (\n        <ClickAwayListener onClickAway={handleTooltipClose}>\n            <Tooltip\n                placement=\"right\"\n                onClose={handleTooltipClose}\n                open={isTooltipOpen}\n                title=\"Скопировано\"\n                leaveDelay={1500}\n            >\n                <CopyIcon\n                    onClick={handleClick}\n                    sx={{\n                        cursor: 'pointer',\n                    }}\n                />\n            </Tooltip>\n        </ClickAwayListener>\n    );\n};\n","import { memo } from 'react';\n\nimport { Table, TableBody, TableRow, TableCell, Typography } from '@mui/material';\n\nimport { colors } from 'src/theme';\n\nimport { CopyButton } from 'src/shared/CopyButton';\n\ntype TableRowProps = {\n    id: number;\n    title: string;\n    info: string;\n    copyButton: boolean;\n};\n\ntype TableProps = {\n    data: TableRowProps[] | null;\n};\n\nexport const InfoTable = memo(({ data }: TableProps) => {\n    return (\n        <Table\n            sx={{\n                borderCollapse: 'collapse',\n                border: `1px solid ${colors.neutral200}`,\n                maxWidth: '700px',\n            }}\n        >\n            <TableBody\n                sx={{\n                    td: {\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        columnGap: '20px',\n                        flexWrap: 'wrap',\n                        p: '24px',\n                        borderColor: colors.neutral200,\n                        borderLeft: `1px solid ${colors.neutral200}`,\n                    },\n                    th: {\n                        borderColor: colors.neutral200,\n                        p: '24px',\n                        color: colors.neutral600,\n                        width: 'max-content',\n                        minWidth: '250px',\n                    },\n                }}\n            >\n                {data?.map((el) => (\n                    <TableRow key={el.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            <Typography variant=\"descriptionRegular\">{el.title}</Typography>\n                        </TableCell>\n                        <TableCell component=\"td\" scope=\"row\">\n                            <Typography variant=\"descriptionSemiBold\">{el.info}</Typography>\n                            {el.copyButton ? <CopyButton text={el.info} /> : ''}\n                        </TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    );\n});\n","import { Box, Typography, SxProps } from '@mui/material';\n\nimport { colors } from 'src/theme';\n\nexport const Plate = ({ message, sx }: { message: string; sx?: SxProps }) => (\n    <Box\n        sx={{\n            p: '10px 20px',\n            display: 'flex',\n            background: colors.neutral200,\n            height: '100%',\n            alignItems: 'center',\n            justifyContent: 'center',\n            borderRadius: '4px',\n            ...sx,\n        }}\n    >\n        <Typography variant=\"descriptionRegular\" sx={{ textAlign: 'center' }}>\n            {message}\n        </Typography>\n    </Box>\n);\n","import { FC, ReactNode } from 'react';\nimport { Stack, Box } from '@mui/material';\nimport { CardBackground } from 'src/utils/getCardCover';\n\nexport type BaseCardProps = {\n    size?: 'normal' | 'large';\n    cardCover?: CardBackground;\n    children?: ReactNode;\n};\n\nexport const BaseCard: FC<BaseCardProps> = ({ size = 'normal', cardCover, children }) => {\n    return (\n        <Stack\n            spacing={size === 'large' ? '40px' : '35px'}\n            sx={{\n                width: size === 'large' ? '282px' : `260px`,\n                minWidth: size === 'large' ? '282px' : '260px',\n                height: size === 'large' ? '180px' : '166px',\n                padding: '16px',\n                zIndex: '1',\n                position: 'relative',\n                color: '#FFFFFF',\n                borderRadius: '16px',\n                textShadow: '0px 2.29088px 4.73px rgba(8, 43, 69, 0.16)',\n            }}\n        >\n            {children}\n            <Box\n                sx={{\n                    width: size === 'large' ? '277px' : '255px',\n                    height: size === 'large' ? '177px' : '163px',\n                    position: 'absolute',\n                    zIndex: '-2',\n                    top: size === 'large' ? '-39px' : '-34px',\n                    left: '2px',\n                    borderRadius: '13px',\n                    backgroundColor: `${cardCover?.defaultBackgroundColor}`,\n                }}\n            />\n            <Box\n                component=\"img\"\n                src={cardCover?.imgSrc}\n                sx={{\n                    width: size === 'large' ? '282px' : '260px',\n                    height: size === 'large' ? '180px' : '166px',\n                    position: 'absolute',\n                    zIndex: '-1',\n                    top: size === 'large' ? '-40px' : '-35px',\n                    left: '0',\n                }}\n            />\n        </Stack>\n    );\n};\n","export const formatNumberToSpacingString = (num: number) => {\n    return new Intl.NumberFormat('ru-RU', { maximumFractionDigits: 2 }).format(num);\n};\n\nexport const formatInputToSpacingString = (str: string) => {\n    if (str.match(/[^\\s\\d.,]/)) return '';\n    if (Number(str.match(/[,.]/g)?.length) > 1) return '';\n    const dividerPosition = str.match(/[,.]/);\n    if (dividerPosition && Number(dividerPosition.index) < str.length - 3) return '';\n    return str.replaceAll(' ', '').replace(/(\\d)(?=(\\d{3})+([^\\d]|$))/g, '$1 ');\n};\n\nexport const convertToNumber = (value: string) => +value.replaceAll(/\\s/g, '').replace(',', '.');\n\nexport const formatPhoneNumberOutput = (phoneNumber: string) => {\n    const pattern = new RegExp(`(^\\\\d{${phoneNumber.length % 10}})(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2}$)`);\n    return phoneNumber.replace(pattern, '+$1 ($2) $3 $4 $5');\n};\n\nexport const formatAmountOutput = (value: string) => value.replace(/(\\d{1,3}(?=(?:\\d\\d\\d)+(?!\\d)))/g, `$1 `);\n\nexport const separateStringByN = (string: string, n: number) => {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        result += string[i];\n        if ((i + 1) % n === 0 && i < string.length - 1) result += ' ';\n    }\n    return result;\n};\n"],"names":["currencyData","EUR","icon","name","symbol","USD","CNY","RUB","getCurrencyName","code","_currencyData","rubData","rusName","buyingRub","sellingRub","convertForward","amountToConvert","fromCurrency","toCurrency","data","_data$find","rubValue","convertToNumber","find","el","targetData","targetCurrencyValue","Number","formatNumberToSpacingString","convertBackward","targetConverted","_data$find2","value","fromValue","Infinity","BackArrowButton","_ref","props","Object","assign","_objectDestructuringEmpty","_jsx","Button","_objectSpread","variant","startIcon","ArrowBackIosIcon","sx","color","children","ComingSoonModal","isOpen","onClose","Dialog","zIndex","open","_jsxs","Paper","elevation","height","tablet","mobile","width","p","borderRadius","IconButton","onClick","position","right","top","CloseIcon","fontSize","Stack","spacing","alignItems","justifyContent","Box","component","src","errorImg","mb","textAlign","colors","whiteSpace","Typography","CopyIcon","createSvgIcon","fillRule","clipRule","d","fill","CopyButton","text","_useState","useState","_useState2","_slicedToArray","isTooltipOpen","setIsTooltipOpen","handleTooltipClose","ClickAwayListener","onClickAway","Tooltip","placement","title","leaveDelay","navigator","clipboard","writeText","cursor","InfoTable","memo","Table","borderCollapse","border","concat","maxWidth","TableBody","td","display","columnGap","flexWrap","borderColor","borderLeft","th","minWidth","map","TableRow","TableCell","scope","info","copyButton","id","Plate","message","background","BaseCard","_ref$size","size","cardCover","padding","textShadow","left","backgroundColor","defaultBackgroundColor","imgSrc","num","Intl","NumberFormat","maximumFractionDigits","format","formatInputToSpacingString","str","_str$match","match","length","dividerPosition","index","replaceAll","replace","formatPhoneNumberOutput","phoneNumber","pattern","RegExp","formatAmountOutput","separateStringByN","string","n","result","i"],"sourceRoot":""}