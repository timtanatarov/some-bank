{"version":3,"file":"static/js/675.967e8d46.chunk.js","mappings":"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","sources":["shared/SuccessDialog.tsx","components/ProfilePage/Security/Password/constants.ts","components/ProfilePage/Security/Password/index.tsx","components/ProfilePage/Security/index.tsx","hooks/useMatchesScreen.ts","shared/ControlQuestion/constants.ts","shared/ControlQuestion/utils.ts","shared/ControlQuestion/index.tsx","shared/CustomInput/utils.ts","shared/CustomInput/index.tsx","utils/validators.ts"],"sourcesContent":["import { FC } from 'react';\nimport { Box, Typography, IconButton, Dialog } from '@mui/material';\n\nimport CongratsImg from 'src/images/resetPassImages/Congrats.png';\n\nimport { colors } from 'src/theme';\n\nimport { CloseIcon } from './icons/Close';\n\ntype SuccessDialogProps = {\n    isOpen: boolean;\n    title: string;\n    onClose: VoidFunction;\n};\n\nexport const SuccessDialog: FC<SuccessDialogProps> = ({ isOpen, title, onClose }) => {\n    return (\n        <Dialog\n            open={isOpen}\n            maxWidth={false}\n            onClose={onClose}\n            sx={{\n                '& .MuiDialog-container': { background: colors.background },\n                zIndex: 1000000,\n            }}\n        >\n            <Box\n                sx={{\n                    position: 'relative',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    rowGap: '32px',\n                    width: { tablet: '416px' },\n                    height: { tablet: '380px', mobile: '384px' },\n                    zIndex: '1000',\n                    background: colors.neutral0,\n                    borderRadius: '4px',\n                    py: '60px',\n                    px: '37px',\n                }}\n            >\n                <IconButton\n                    sx={{ position: 'absolute', top: '16px', right: '16px', color: colors.primary }}\n                    onClick={onClose}\n                    disableRipple={true}\n                >\n                    <CloseIcon />\n                </IconButton>\n                <Box\n                    component=\"img\"\n                    src={CongratsImg}\n                    alt=\"congrats\"\n                    sx={{\n                        ml: '14px',\n                        width: '168px',\n                        height: '176px',\n                    }}\n                />\n                <Typography variant=\"subtitle2Semibold\" sx={{ lineHeight: '30px', textAlign: 'center' }}>\n                    {title}\n                </Typography>\n            </Box>\n        </Dialog>\n    );\n};\n","import * as Yup from 'yup';\nimport { passwordSchema } from 'src/utils/validators';\n\nexport const PasswordValidSchema = Yup.object().shape({\n    oldPassword: passwordSchema,\n    newPassword: passwordSchema,\n    confirmPassword: Yup.string().oneOf([Yup.ref('newPassword')], 'Пароли не совпадают'),\n});\n","import { useEffect, useState } from 'react';\nimport { Stack, Typography, Button, useTheme } from '@mui/material';\n\nimport { CustomInput } from 'src/shared/CustomInput';\n\nimport { useFormik } from 'formik';\n\nimport { useChangePasswordMutation } from 'src/redux/apis/userService';\nimport { SuccessDialog } from 'src/shared/SuccessDialog';\n\nimport { PasswordValidSchema } from './constants';\n\nexport const ChangePasswordBlock = () => {\n    const theme = useTheme();\n    const [isFocusOldPassword, setIsFocusOldPassword] = useState(false);\n    const [isFocusNewPassword, setIsFocusNewPassword] = useState(false);\n    const [isDialogVisible, setIsDialogVisible] = useState(false);\n    const [changePassword, { isSuccess: isPasswordChanged, isError: isPasswordError, reset }] =\n        useChangePasswordMutation();\n\n    const formik = useFormik({\n        initialValues: {\n            oldPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n        },\n        validationSchema: PasswordValidSchema,\n        onSubmit: (values) => changePassword({ oldPassword: values.oldPassword, newPassword: values.newPassword }),\n    });\n\n    const handleResetForm = formik.resetForm;\n\n    useEffect(() => {\n        if (isPasswordChanged) {\n            setIsDialogVisible(true);\n            handleResetForm();\n        }\n    }, [isPasswordChanged, handleResetForm]);\n\n    const handleOldPasswordFocus = () => {\n        setIsFocusOldPassword(!isFocusOldPassword);\n    };\n    const handleNewPasswordFocus = () => {\n        setIsFocusNewPassword(!isFocusNewPassword);\n    };\n\n    const handleDialogClose = () => {\n        setIsDialogVisible(false);\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (isPasswordError) reset();\n        formik.setFieldValue('oldPassword', e.target.value);\n    };\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <Stack spacing=\"24px\" sx={{ width: '100%' }}>\n                <Typography\n                    variant=\"descriptionSemiBold\"\n                    sx={{\n                        [theme.breakpoints.down('laptop')]: {\n                            fontSize: '20px',\n                            lineHeight: '30px',\n                            fontWeight: 400,\n                        },\n                        [theme.breakpoints.down('tablet')]: { fontSize: '16px', lineHeight: '20px' },\n                    }}\n                >\n                    Изменить пароль авторизации\n                </Typography>\n                <Stack spacing=\"16px\">\n                    <CustomInput\n                        id=\"oldPassword\"\n                        label=\"Введите свой старый пароль\"\n                        fullWidth={true}\n                        name=\"oldPassword\"\n                        type=\"password\"\n                        value={formik.values.oldPassword}\n                        onBlur={handleOldPasswordFocus}\n                        onFocus={handleOldPasswordFocus}\n                        onChange={handleChange}\n                        error={!!formik.errors.oldPassword || isPasswordError}\n                        helperText={\n                            formik.errors.oldPassword ||\n                            (isFocusOldPassword &&\n                                !formik.values.oldPassword &&\n                                `Пароль должен содержать символы следующих групп: \n                заглавные и строчные буквы латиницы, цифры, \n                специальные`) ||\n                            (isPasswordError && 'Неверный пароль')\n                        }\n                    />\n                    <CustomInput\n                        id=\"newPassword\"\n                        label=\"Введите новый пароль\"\n                        fullWidth={true}\n                        name=\"newPassword\"\n                        type=\"password\"\n                        value={formik.values.newPassword}\n                        onBlur={handleNewPasswordFocus}\n                        onFocus={handleNewPasswordFocus}\n                        onChange={formik.handleChange}\n                        error={!!formik.errors.newPassword}\n                        helperText={\n                            formik.errors.newPassword ||\n                            (isFocusNewPassword &&\n                                !formik.values.newPassword &&\n                                `Пароль должен содержать символы следующих групп: \n                заглавные и строчные буквы латиницы, цифры, \n                специальные`)\n                        }\n                    />\n                    <CustomInput\n                        id=\"confirmPassword\"\n                        fullWidth={true}\n                        label=\"Повторите пароль\"\n                        name=\"confirmPassword\"\n                        value={formik.values.confirmPassword}\n                        type=\"password\"\n                        error={!!formik.errors.confirmPassword}\n                        helperText={formik.errors.confirmPassword}\n                        onChange={formik.handleChange}\n                    />\n                </Stack>\n\n                <Button\n                    fullWidth={true}\n                    variant=\"primary\"\n                    type=\"submit\"\n                    disabled={\n                        !formik.values.oldPassword ||\n                        !formik.values.newPassword ||\n                        !formik.values.confirmPassword ||\n                        !formik.isValid\n                    }\n                >\n                    Сохранить\n                </Button>\n            </Stack>\n            <SuccessDialog isOpen={isDialogVisible} onClose={handleDialogClose} title=\"Пароль успешно изменен\" />\n        </form>\n    );\n};\n","import { useEffect, useState } from 'react';\n\nimport { useAppSelector } from 'src/redux/hooks';\nimport { selectClientId } from 'src/redux/selectors';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport { Tabs, Tab, Typography, Stack, Button, useTheme } from '@mui/material';\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\n\nimport { useMatchesScreen } from 'src/hooks/useMatchesScreen';\n\nimport { ControlQuestion } from 'src/shared/ControlQuestion';\n\nimport { useGetUserInfoQuery, useUpdateSecurityQuestionMutation } from 'src/redux/apis/userService';\n\nimport { SuccessDialog } from 'src/shared/SuccessDialog';\n\nimport { ChangePasswordBlock } from 'src/components/ProfilePage/Security/Password';\nimport { AppRoutes } from 'src/constants';\nimport { colors } from 'src/theme';\n\nexport const SecuritySettingsBlock = () => {\n    const theme = useTheme();\n    const clientId = useAppSelector(selectClientId);\n    const { isMobile, isTablet, isLaptop } = useMatchesScreen();\n    const isLowerThanLaptop = isMobile || isTablet;\n    const [isMenuOpen, setIsMenuOpen] = useState(true);\n    const navigate = useNavigate();\n    const [activeTab, setActiveTab] = useState(0);\n    const [isDialogVisible, setIsDialogVisible] = useState(false);\n\n    const [updateSecurityQuestion, { isSuccess: isQuestionChanged, isError: isQuestionError }] =\n        useUpdateSecurityQuestionMutation();\n    const { data, refetch } = useGetUserInfoQuery(clientId);\n\n    useEffect(() => {\n        if (isQuestionChanged) setIsDialogVisible(true);\n    }, [isQuestionChanged]);\n\n    const handleContinueQuestion = ({\n        securityQuestion,\n        securityAnswer,\n    }: {\n        securityQuestion: string;\n        securityAnswer: string;\n    }) => {\n        updateSecurityQuestion({\n            securityQuestion,\n            securityAnswer,\n        });\n    };\n\n    const handleDialogClose = () => {\n        setIsDialogVisible(false);\n        if (isQuestionChanged) refetch();\n    };\n\n    return (\n        <Stack spacing={{ laptop: 3 }}>\n            {!(isTablet || isLaptop) && (\n                <Typography variant={isLowerThanLaptop ? 'subtitle2Semibold' : 'bold24'} component=\"h5\">\n                    Безопасность\n                </Typography>\n            )}\n            <Tabs\n                orientation={isLowerThanLaptop ? 'vertical' : 'horizontal'}\n                value={activeTab}\n                onChange={(e, value) => setActiveTab(value)}\n                sx={{\n                    minHeight: 'auto',\n                    display: 'flex',\n                    paddingTop: { tablet: '0', mobile: '32px' },\n\n                    '.MuiTabs-indicator': {\n                        laptop: {\n                            background: colors.secondary200,\n                            height: '3px',\n                            borderRadius: '10px',\n                            display: 'block',\n                        },\n                        mobile: { display: 'none' },\n                    },\n\n                    '.MuiTabs-scroller': {\n                        flexGrow: 0,\n                        width: 'auto',\n                    },\n\n                    '.MuiTabs-flexContainer': {\n                        width: 'auto',\n                        gap: { laptop: '54px', mobile: '24px' },\n                        borderBottom: { laptop: `1px solid ${colors.neutral200}` },\n                        alignItems: 'flex-start',\n                    },\n                }}\n            >\n                {(!isLowerThanLaptop || isMenuOpen) &&\n                    ['Изменить контрольный вопрос', 'Изменить пароль авторизации'].map((el, i) => (\n                        <Tab\n                            sx={{\n                                fontSize: { laptop: '16px', tablet: '20px', mobile: '16px' },\n                                lineHeight: { laptop: '24px', tablet: '30px', mobile: '24px' },\n                                fontWeight: isLowerThanLaptop ? 400 : 600,\n                                textTransform: 'none',\n                                color: {\n                                    mobile: colors.primary,\n                                    laptop: colors.neutral600,\n                                },\n                                padding: '0 16px 2px 0',\n                                minHeight: 'auto',\n\n                                '&:hover': {\n                                    color: colors.primary,\n                                },\n\n                                '&.Mui-selected': {\n                                    color: `${colors.primary} !important`,\n                                },\n                            }}\n                            label={el}\n                            value={i}\n                            key={i}\n                            icon={isLowerThanLaptop ? <KeyboardArrowRightIcon /> : undefined}\n                            iconPosition=\"end\"\n                            onClick={() => {\n                                setIsMenuOpen(false);\n                            }}\n                        />\n                    ))}\n            </Tabs>\n            {(!isLowerThanLaptop || isMenuOpen) && (\n                <Stack spacing={3} sx={{ width: { tablet: '416px', mobile: 'auto' } }}>\n                    {activeTab === 0 && (\n                        <Stack spacing={3}>\n                            {isLowerThanLaptop && (\n                                <Typography\n                                    variant=\"descriptionSemiBold\"\n                                    sx={{\n                                        [theme.breakpoints.down('laptop')]: {\n                                            fontSize: '20px',\n                                            lineHeight: '30px',\n                                            fontWeight: 400,\n                                        },\n                                        [theme.breakpoints.down('tablet')]: { fontSize: '16px', lineHeight: '20px' },\n                                    }}\n                                >\n                                    Изменить контрольный вопрос\n                                </Typography>\n                            )}\n                            <ControlQuestion\n                                currentQuestion={data?.securityQuestion}\n                                onContinue={handleContinueQuestion}\n                                buttonText=\"Сохранить\"\n                                error={isQuestionError}\n                            />\n                        </Stack>\n                    )}\n                    {activeTab === 1 && <ChangePasswordBlock />}\n\n                    <Button variant=\"secondary\" fullWidth={true} onClick={() => navigate(AppRoutes.profileRoute)}>\n                        Отмена\n                    </Button>\n                </Stack>\n            )}\n            <SuccessDialog\n                isOpen={isDialogVisible}\n                title=\"Контрольный вопрос успешно изменен\"\n                onClose={handleDialogClose}\n            />\n        </Stack>\n    );\n};\n","import { useTheme } from '@mui/material/styles';\nimport { Options, useMediaQuery } from '@mui/material';\n\nconst options: Options = {\n    noSsr: true,\n};\n\nexport const useMatchesScreen = () => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.between('mobile', 'tablet'), options);\n    const isTablet = useMediaQuery(theme.breakpoints.between('tablet', 'laptop'), options);\n    const isLaptop = useMediaQuery(theme.breakpoints.between('laptop', 'desktop'), options);\n    const isDesktop = useMediaQuery(theme.breakpoints.up('desktop'), options);\n\n    return { isMobile, isTablet, isLaptop, isDesktop };\n};\n","import * as Yup from 'yup';\n\nimport { controlQuestionAndAnswerSchema } from 'src/utils/validators';\n\nexport const MAX_SECURITY_QUESTION_SYMBOLS = 50;\n\nexport const ControlQuestionValidSchema = Yup.object().shape({\n    ownQuestion: controlQuestionAndAnswerSchema.max(50, 'Контрольный вопрос не должен быть длиннее 50 символов'),\n    securityAnswer: controlQuestionAndAnswerSchema.max(50, 'Ответ не должен быть длиннее 50 символов'),\n});\n","type GetHelperText = {\n    isFocus: boolean;\n    text: string;\n    symbolCount: number;\n    currentValue: string;\n    errorText?: string;\n};\n\nexport const getHelperText = ({ isFocus, text, symbolCount, currentValue, errorText }: GetHelperText) => {\n    if (!isFocus) return errorText;\n    if (currentValue) return errorText || `${symbolCount} / 50`;\n    return `${text} может содержать символы следующих групп: \n            заглавные и строчные буквы латиницы, заглавные и \n            строчные буквы кириллицы, цифры, специальные`;\n};\n","import { useState, FC, useEffect } from 'react';\n\nimport { Box, Button, Stack, Select, MenuItem, SelectChangeEvent } from '@mui/material';\n\nimport { useFormik } from 'formik';\n\nimport { CustomInput } from 'src/shared/CustomInput';\nimport { SelectArrowUpIcon, SuccessIcon } from 'src/shared/icons';\n\nimport { colors } from 'src/theme';\n\nimport { ControlQuestionValidSchema, MAX_SECURITY_QUESTION_SYMBOLS } from './constants';\nimport { getHelperText } from './utils';\n\nconst itemsList = [\n    'Девичья фамилия матери',\n    'Имя лучшего друга из детства',\n    'Любимая книга',\n    'Любимый цвет',\n    'Любимое блюдо',\n    'Написать свой вопрос',\n];\n\ntype ControlQuestionPropsType = {\n    currentQuestion?: string;\n    buttonText?: string;\n    onContinue: (value: { securityQuestion: string; securityAnswer: string }) => void;\n    error?: boolean;\n};\n\nexport const ControlQuestion: FC<ControlQuestionPropsType> = ({\n    currentQuestion,\n    onContinue,\n    buttonText = 'Продолжить',\n    error,\n}) => {\n    const [currentItem, setCurrentItem] = useState(() => itemsList[0]);\n    const [isOpen, setIsOpen] = useState(false);\n    const [isFocusOwnQuestion, setIsFocusOwnQuestion] = useState(false);\n    const [isFocusSecurityAnswer, setIsFocusSecurityAnswer] = useState(false);\n\n    const formik = useFormik({\n        initialValues: {\n            ownQuestion: '',\n            securityAnswer: '',\n        },\n        validationSchema: ControlQuestionValidSchema,\n        onSubmit: (value, { resetForm }) => {\n            onContinue({\n                securityQuestion: value.ownQuestion || currentItem,\n                securityAnswer: value.securityAnswer,\n            });\n            resetForm();\n        },\n    });\n\n    useEffect(() => {\n        if (currentQuestion) {\n            if (!itemsList.includes(currentQuestion)) itemsList.push(currentQuestion);\n            setCurrentItem(currentQuestion);\n        }\n        return () => {\n            if (itemsList.length > 6) {\n                itemsList.pop();\n            }\n        };\n    }, [currentQuestion]);\n\n    const handleChange = (event: SelectChangeEvent) => {\n        setCurrentItem(event.target.value);\n    };\n\n    const handleOwnQuestionFocus = () => {\n        setIsFocusOwnQuestion(!isFocusOwnQuestion);\n    };\n\n    const handleSecurityAnswerFocus = () => {\n        setIsFocusSecurityAnswer(!isFocusSecurityAnswer);\n    };\n\n    const handleToggleSelect = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const handleClearClick = (value: string) => {\n        formik.setFieldValue(value, '');\n    };\n\n    const symbolsOwnQuestionLeft = MAX_SECURITY_QUESTION_SYMBOLS - formik.values.ownQuestion.length;\n    const symbolsSecurityAnswerLeft = MAX_SECURITY_QUESTION_SYMBOLS - formik.values.securityAnswer.length;\n\n    const selectStyle = {\n        fontSize: 16,\n        color: colors.primary,\n        '&.MuiOutlinedInput-root fieldset': {\n            border: 'none',\n        },\n        '& .MuiInputBase-input': {\n            padding: 0,\n            '& .MuiSvgIcon-root': {\n                display: 'none',\n            },\n        },\n    };\n\n    const isButtonDisabled =\n        (currentItem === 'Написать свой вопрос' && !formik.values.ownQuestion) ||\n        !formik.values.securityAnswer ||\n        !formik.isValid;\n\n    return (\n        <Box component=\"form\" onSubmit={formik.handleSubmit}>\n            <Stack spacing={3}>\n                <Select\n                    variant=\"outlined\"\n                    sx={selectStyle}\n                    defaultValue={currentQuestion}\n                    value={currentItem}\n                    open={isOpen}\n                    onClose={handleToggleSelect}\n                    onOpen={handleToggleSelect}\n                    onChange={handleChange}\n                    IconComponent={(props) => <SelectArrowUpIcon {...props} />}\n                >\n                    {itemsList.map((item, index) => (\n                        <MenuItem\n                            disableRipple={true}\n                            sx={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                alignItems: 'center',\n                                '&.MuiMenuItem-root': {\n                                    '&.Mui-selected': { background: 'none', fontWeight: 600 },\n                                },\n                            }}\n                            key={index}\n                            value={item}\n                        >\n                            {item}\n                            {currentItem === item && <SuccessIcon />}\n                        </MenuItem>\n                    ))}\n                </Select>\n                {currentItem === 'Написать свой вопрос' && (\n                    <CustomInput\n                        id=\"ownQuestion\"\n                        label=\"Введите контрольный вопрос\"\n                        type=\"text\"\n                        name=\"ownQuestion\"\n                        fullWidth={true}\n                        isClearable={true}\n                        multiline={true}\n                        value={formik.values.ownQuestion}\n                        onBlur={handleOwnQuestionFocus}\n                        onFocus={handleOwnQuestionFocus}\n                        error={symbolsOwnQuestionLeft < 0 || !!formik.errors.ownQuestion}\n                        helperText={getHelperText({\n                            isFocus: isFocusOwnQuestion,\n                            text: 'Вопрос',\n                            symbolCount: symbolsOwnQuestionLeft,\n                            currentValue: formik.values.ownQuestion,\n                            errorText: formik.errors.ownQuestion,\n                        })}\n                        onChange={formik.handleChange}\n                        onClear={() => handleClearClick('ownQuestion')}\n                    />\n                )}\n                <CustomInput\n                    id=\"securityAnswer\"\n                    label=\"Введите ответ на контрольный вопрос\"\n                    type=\"text\"\n                    name=\"securityAnswer\"\n                    fullWidth={true}\n                    isClearable={true}\n                    onBlur={handleSecurityAnswerFocus}\n                    onFocus={handleSecurityAnswerFocus}\n                    value={formik.values.securityAnswer}\n                    error={symbolsSecurityAnswerLeft < 0 || !!formik.errors.securityAnswer || error}\n                    helperText={\n                        getHelperText({\n                            isFocus: isFocusSecurityAnswer,\n                            text: 'Ответ',\n                            symbolCount: symbolsSecurityAnswerLeft,\n                            currentValue: formik.values.securityAnswer,\n                            errorText: formik.errors.securityAnswer,\n                        }) ||\n                        (error && 'Что-то не так, повторите отправку')\n                    }\n                    onChange={formik.handleChange}\n                    onClear={() => handleClearClick('securityAnswer')}\n                />\n\n                <Button\n                    sx={{ marginTop: '60px' }}\n                    fullWidth={true}\n                    variant=\"primary\"\n                    type=\"submit\"\n                    disabled={isButtonDisabled}\n                >\n                    {buttonText}\n                </Button>\n            </Stack>\n        </Box>\n    );\n};\n","import { BeforeMaskedStateChangeStates } from 'react-input-mask';\n\nconst getIsStartNumber = (startSymbol: string): boolean => {\n    switch (startSymbol) {\n        case '8':\n            return true;\n        case '9':\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport function beforeMaskedStateChange({ nextState, currentState }: BeforeMaskedStateChangeStates) {\n    let { value } = nextState;\n    let selection = nextState.selection;\n    const cursorPosition = selection ? selection.start : null;\n    const lengthWithPlusSeven = 30;\n    const lengthWithEightOrNine = 29;\n\n    const startValueWithPlusSeven = currentState.value.slice(4, 6) === '+7';\n\n    const startSymbol = currentState.value.slice(4, 5);\n\n    const isStartNumber = getIsStartNumber(startSymbol);\n\n    if (currentState.value.length === lengthWithPlusSeven && startValueWithPlusSeven) {\n        value = currentState.value.slice(4, 16);\n    }\n    if (currentState.value.length === lengthWithEightOrNine && isStartNumber) {\n        value = '+7' + currentState.value.slice(5, 15);\n    }\n    if (cursorPosition && !value.includes('_')) {\n        selection = { start: value.length, end: value.length };\n    }\n\n    return {\n        value,\n        selection,\n    };\n}\n","import React, { useState } from 'react';\nimport InputMask from 'react-input-mask';\n\nimport { FormControl, FormHelperText, InputBase, InputLabel, InputBaseProps } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { DeleteIcon, ShowPassIcon, HidePassIcon } from 'src/shared/icons';\nimport { colors } from 'src/theme';\n\nimport { beforeMaskedStateChange } from './utils';\n\ntype MyInputProps = InputBaseProps & {\n    id: string;\n    label?: string;\n    value?: string;\n    type: string;\n    mask?: string;\n    helperText?: string | boolean;\n    isClearable?: boolean;\n    onClear?: VoidFunction;\n    defaultMaskedValue?: string;\n};\n\nexport const CustomInput = ({\n    id,\n    label,\n    value,\n    type,\n    error,\n    helperText,\n    isClearable,\n    onClear,\n    mask,\n    onChange,\n    defaultMaskedValue = '',\n    ...rest\n}: MyInputProps) => {\n    const [isCapslockOn, setIsCapslockOn] = useState<boolean>(false);\n    const [isShowPassword, setShowPassword] = useState(false);\n    const theme = useTheme();\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        setIsCapslockOn(e.getModifierState('CapsLock'));\n    };\n    const handleTogglePasswordClick = () => {\n        setShowPassword(!isShowPassword);\n    };\n\n    const passwordShowButton = isShowPassword ? (\n        <HidePassIcon data-testid={`${id}-hideIcon`} onClick={handleTogglePasswordClick} sx={{ cursor: 'pointer' }} />\n    ) : (\n        <ShowPassIcon data-testid={`${id}-showIcon`} onClick={handleTogglePasswordClick} sx={{ cursor: 'pointer' }} />\n    );\n\n    const endAdornmentAttributes =\n        value && isClearable && value !== defaultMaskedValue ? (\n            <DeleteIcon data-testid={`${id}-deleteIcon`} onMouseDown={onClear} sx={{ cursor: 'pointer' }} />\n        ) : !isClearable && type === 'password' ? (\n            passwordShowButton\n        ) : (\n            rest.endAdornment\n        );\n\n    const style = {\n        'label + &': {\n            marginTop: 3,\n        },\n        '&.MuiInputBase-root': {\n            [theme.breakpoints.down('tablet')]: {\n                fontSize: '14px',\n                lineHeight: '24px',\n            },\n            height: '44px',\n            borderRadius: '4px',\n            border: `1px solid ${colors.neutral400}`,\n            fontSize: 16,\n            padding: '10px 16px',\n            fontFamily: 'SF Pro Display, sans-serif',\n            '&.Mui-error': {\n                border: `1px solid ${colors.alert}`,\n            },\n            '&.Mui-focused': {\n                border: `1px solid ${colors.neutral600}`,\n                '&.Mui-error': {\n                    border: `1px solid ${colors.alert}`,\n                },\n            },\n        },\n    };\n\n    const combinedHelperText = helperText || (isCapslockOn && 'Включен CapsLock');\n    return mask ? (\n        <InputMask\n            mask={mask}\n            maskPlaceholder=\"_\"\n            alwaysShowMask={true}\n            onChange={onChange}\n            type={type}\n            beforeMaskedStateChange={type === 'tel' ? beforeMaskedStateChange : undefined}\n        >\n            <FormControl variant=\"standard\">\n                <InputLabel shrink={true} htmlFor={id}>\n                    {label}\n                </InputLabel>\n                <InputBase\n                    id={id}\n                    aria-describedby={`${id}-helper-text`}\n                    error={error}\n                    value={value || defaultMaskedValue}\n                    onKeyDown={handleKeyPress}\n                    {...rest}\n                    endAdornment={endAdornmentAttributes}\n                    inputProps={{ ...rest.inputProps }}\n                    sx={style}\n                />\n                <FormHelperText error={error} id={`${id}-helper-text`} data-testid={`${id}-helpText`}>\n                    {helperText}\n                </FormHelperText>\n            </FormControl>\n        </InputMask>\n    ) : (\n        <FormControl fullWidth={rest.fullWidth} variant=\"standard\">\n            <InputLabel shrink={true} htmlFor={id}>\n                {label}\n            </InputLabel>\n            <InputBase\n                id={id}\n                aria-describedby={`${id}-helper-text`}\n                value={value}\n                type={type === 'password' && isShowPassword ? 'text' : type}\n                onChange={onChange}\n                error={error || isCapslockOn}\n                onKeyDown={handleKeyPress}\n                {...rest}\n                endAdornment={endAdornmentAttributes}\n                inputProps={{ ...rest.inputProps }}\n                sx={style}\n                data-testid={`${id}-inputWrap`}\n            />\n            <FormHelperText error={error || isCapslockOn} id={`${id}-helper-text`} data-testid={`${id}-helpText`}>\n                {combinedHelperText}\n            </FormHelperText>\n        </FormControl>\n    );\n};\n","import * as Yup from 'yup';\nimport YupPassword from 'yup-password';\n\nYupPassword(Yup);\n\nexport const passportPattern = /^[A-Z-0-9]*$/;\n\nexport const questionsPattern = /^[А-ЯЁA-Z]([0-9-a-zа-яё#*+%\\s])[^-]*$/u;\n\nexport const phonePattern = /^[0-9\\s+(\\)']*$/;\n\nexport const userInfoPattern = /^[А-ЯЁA-Z]([-'\\sА-ЯЁA-Zа-яёa-z])*[А-ЯЁA-Zа-яёa-z]$/;\n\nexport const passwordLengthErrorText = 'Длина пароля должна быть от 6 до 20 символов';\n\nexport const minLengthErrorText = 'Недостаточное количество символов';\n\nexport const passportMaxLengthErrorText = 'Длина номера паспорта не может превышать более 15 символов';\n\nexport const passwordErrorText =\n    'Пароль должен содержать символы следующих групп: заглавные и строчные латинские буквы, цифры, специальные';\n\nexport const passwordSchema = Yup.string()\n    .min(6, passwordLengthErrorText)\n    .max(20, passwordLengthErrorText)\n    .minUppercase(1, passwordErrorText)\n    .minLowercase(1, passwordErrorText)\n    .minNumbers(1, passwordErrorText)\n    .minSymbols(1, passwordErrorText)\n    .matches(/^[^\\sА-ЯЁа-яё]*$/, passwordErrorText);\n\nexport const controlQuestionAndAnswerSchema = Yup.string()\n    .min(2, minLengthErrorText)\n    .matches(questionsPattern, 'Использованы недопустимые символы');\n\nexport const validateConverterInput = (value: string): boolean => {\n    const pattern = /(?:[1-9.][0-9.]*)$|^$/;\n\n    const lastIndex = value.length - 1;\n\n    if (!pattern.test(value)) {\n        return false;\n    }\n\n    if (value[lastIndex] === '.' && value.indexOf('.') < lastIndex) {\n        return false;\n    }\n\n    return true;\n};\n"],"names":["SuccessDialog","_ref","isOpen","title","onClose","_jsx","Dialog","open","maxWidth","sx","background","colors","zIndex","children","_jsxs","Box","position","display","flexDirection","alignItems","rowGap","width","tablet","height","mobile","borderRadius","py","px","IconButton","top","right","color","onClick","disableRipple","CloseIcon","component","src","CongratsImg","alt","ml","Typography","variant","lineHeight","textAlign","PasswordValidSchema","Yup","shape","oldPassword","passwordSchema","newPassword","confirmPassword","oneOf","ChangePasswordBlock","theme","useTheme","_useState","useState","_useState2","_slicedToArray","isFocusOldPassword","setIsFocusOldPassword","_useState3","_useState4","isFocusNewPassword","setIsFocusNewPassword","_useState5","_useState6","isDialogVisible","setIsDialogVisible","_useChangePasswordMut","useChangePasswordMutation","_useChangePasswordMut2","changePassword","_useChangePasswordMut3","isPasswordChanged","isSuccess","isPasswordError","isError","reset","formik","useFormik","initialValues","validationSchema","onSubmit","values","handleResetForm","resetForm","useEffect","handleOldPasswordFocus","handleNewPasswordFocus","handleSubmit","Stack","spacing","_defineProperty","breakpoints","down","fontSize","fontWeight","CustomInput","id","label","fullWidth","name","type","value","onBlur","onFocus","onChange","e","setFieldValue","target","error","errors","helperText","handleChange","Button","disabled","isValid","SecuritySettingsBlock","_ref2","clientId","useAppSelector","selectClientId","_useMatchesScreen","useMatchesScreen","isMobile","isTablet","isLaptop","isLowerThanLaptop","isMenuOpen","setIsMenuOpen","navigate","useNavigate","activeTab","setActiveTab","_useUpdateSecurityQue","useUpdateSecurityQuestionMutation","_useUpdateSecurityQue2","updateSecurityQuestion","_useUpdateSecurityQue3","isQuestionChanged","isQuestionError","_useGetUserInfoQuery","useGetUserInfoQuery","data","refetch","laptop","Tabs","orientation","minHeight","paddingTop","flexGrow","gap","borderBottom","concat","map","el","i","Tab","textTransform","padding","icon","KeyboardArrowRightIcon","undefined","iconPosition","ControlQuestion","currentQuestion","securityQuestion","onContinue","securityAnswer","buttonText","AppRoutes","options","noSsr","useMediaQuery","between","isDesktop","up","ControlQuestionValidSchema","ownQuestion","controlQuestionAndAnswerSchema","getHelperText","isFocus","text","symbolCount","currentValue","errorText","itemsList","_ref$buttonText","currentItem","setCurrentItem","setIsOpen","isFocusOwnQuestion","setIsFocusOwnQuestion","_useState7","_useState8","isFocusSecurityAnswer","setIsFocusSecurityAnswer","includes","push","length","pop","handleOwnQuestionFocus","handleSecurityAnswerFocus","handleToggleSelect","handleClearClick","symbolsOwnQuestionLeft","symbolsSecurityAnswerLeft","selectStyle","border","isButtonDisabled","Select","defaultValue","onOpen","event","IconComponent","props","SelectArrowUpIcon","_objectSpread","item","index","MenuItem","justifyContent","SuccessIcon","isClearable","multiline","onClear","marginTop","beforeMaskedStateChange","nextState","currentState","selection","cursorPosition","start","startValueWithPlusSeven","slice","isStartNumber","startSymbol","getIsStartNumber","end","_MuiInputBaseRoot","mask","_ref$defaultMaskedVal","defaultMaskedValue","rest","_objectWithoutProperties","_excluded","isCapslockOn","setIsCapslockOn","isShowPassword","setShowPassword","handleKeyPress","getModifierState","handleTogglePasswordClick","passwordShowButton","HidePassIcon","cursor","ShowPassIcon","endAdornmentAttributes","DeleteIcon","onMouseDown","endAdornment","style","combinedHelperText","InputMask","maskPlaceholder","alwaysShowMask","FormControl","InputLabel","shrink","htmlFor","InputBase","onKeyDown","inputProps","FormHelperText","YupPassword","passportPattern","userInfoPattern","passwordLengthErrorText","minLengthErrorText","passportMaxLengthErrorText","passwordErrorText","min","max","minUppercase","minLowercase","minNumbers","minSymbols","matches"],"sourceRoot":""}