{"version":3,"file":"static/js/145.4085cea7.chunk.js","mappings":"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","sources":["utils/sumFormatter.ts","components/MainPage/Accounts/CardDetails/Filters.tsx","components/MainPage/Accounts/CardDetails/Search.tsx","components/MainPage/Accounts/CardDetails/TransactionHistory.tsx","components/MainPage/Accounts/CardDetails/index.tsx","components/MainPage/Operations/Operation.tsx","components/MainPage/Operations/constants.ts","shared/CustomInput/utils.ts","shared/CustomInput/index.tsx","shared/ToggleButton.tsx"],"sourcesContent":["export const sumFormatter = (sum: number | string) => {\n    return String(sum).replace(/(\\d)(?=(\\d{3})+([^\\d]|$))/g, '$1 ');\n};\n","import { Box, Button, Slider, Stack, Typography } from '@mui/material';\nimport { useState } from 'react';\nimport { CustomInput } from 'src/shared/CustomInput';\nimport { ToggleButton } from 'src/shared/ToggleButton';\nimport { colors } from 'src/theme';\nimport { sumFormatter } from 'src/utils/sumFormatter';\n\ntype TransactionsFilterProps = {\n    onClearClick: VoidFunction;\n    onShowResultsClick: VoidFunction;\n    onToggleStatus: (status: string) => void;\n    onSliderClick: (minValue: number, maxValue: number) => void;\n    resultsLength: number;\n    minValue: number;\n    maxValue: number;\n    activeFilter: string;\n};\n\nconst filters = [\n    { value: 'all', title: 'Все операции' },\n    { value: 'purchase', title: 'Платежи' },\n    { value: 'incoming', title: 'Пополнения' },\n];\n\nexport const TransactionsFilter = ({\n    onClearClick,\n    onShowResultsClick,\n    onToggleStatus,\n    onSliderClick,\n    resultsLength,\n    minValue,\n    maxValue,\n    activeFilter,\n}: TransactionsFilterProps) => {\n    const [value, setValue] = useState<number[]>([minValue, maxValue]);\n    const handleChange = (event: Event, newValue: number | number[]) => {\n        setValue(newValue as number[]);\n        onSliderClick(value[0], value[1]);\n    };\n\n    const handleToggleButton = (event: React.MouseEvent<HTMLElement>, status: string) => {\n        onToggleStatus(status);\n    };\n\n    const getValueText = (value: number) => {\n        return sumFormatter(value);\n    };\n\n    return (\n        <Stack sx={{ padding: '0 24px', width: '100%' }}>\n            <Button variant=\"textButton\" onClick={onClearClick} sx={{ alignSelf: 'flex-start', m: '0 0 24px 0' }}>\n                Очистить фильтры\n            </Button>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '12px' }}>\n                {filters.map((el) => (\n                    <ToggleButton\n                        isActiveToggle={activeFilter === el.value}\n                        key={el.value}\n                        value={el.value}\n                        title={el.title}\n                        onToggle={handleToggleButton}\n                    />\n                ))}\n            </Box>\n            <Stack\n                direction=\"row\"\n                alignItems=\"center\"\n                spacing={3}\n                divider={<Typography sx={{ marginTop: '24px !important' }}> - </Typography>}\n            >\n                {value.map((el, index) => (\n                    <CustomInput key={index} id=\"slider\" type=\"input\" value={sumFormatter(el)} />\n                ))}\n            </Stack>\n            <Slider\n                getAriaLabel={getValueText}\n                valueLabelDisplay=\"off\"\n                value={value}\n                onChange={handleChange}\n                getAriaValueText={getValueText}\n                max={maxValue}\n                sx={{\n                    color: colors.secondary300,\n                    m: '24px 0',\n                }}\n            />\n            <Button variant=\"primary\" onClick={onShowResultsClick} sx={{ width: '100%' }}>\n                Показать результаты({resultsLength})\n            </Button>\n        </Stack>\n    );\n};\n","import { Box, IconButton } from '@mui/material';\nimport { CustomInput } from 'src/shared/CustomInput';\n\nimport { SearchIcon, FiltersIcon } from 'src/shared/icons';\n\nimport { colors } from 'src/theme';\n\ntype SearchTransactionsProps = {\n    inputValue: string;\n    onOpenClick: VoidFunction;\n    onClearInputClick: VoidFunction;\n    onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const SearchTransactions = ({\n    onOpenClick,\n    onInputChange,\n    onClearInputClick,\n    inputValue,\n}: SearchTransactionsProps) => {\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                alignSelf: 'start',\n                alignItems: 'center',\n                gap: '17px',\n                pointerEvents: 'none',\n                width: '100%',\n                '& > *': {\n                    pointerEvents: 'all',\n                },\n            }}\n        >\n            <CustomInput\n                startAdornment={\n                    <SearchIcon\n                        viewBox=\"0 0 18 18\"\n                        sx={{\n                            height: '18px',\n                            width: '18px',\n                            color: colors.primary,\n                            marginRight: '15px',\n                            marginLeft: '5px',\n                            pointerEvents: 'none',\n                        }}\n                    />\n                }\n                placeholder=\"Поиск по транзакциям\"\n                value={inputValue}\n                onChange={onInputChange}\n                isClearable={true}\n                onClear={onClearInputClick}\n                fullWidth={true}\n                id=\"transactionsSearch\"\n                type=\"input\"\n            />\n            <IconButton\n                disableRipple={true}\n                onClick={onOpenClick}\n                sx={{\n                    '&:hover': { background: 'transparent' },\n                    mt: 3,\n                }}\n            >\n                <FiltersIcon sx={{ color: colors.primary }} />\n            </IconButton>\n        </Box>\n    );\n};\n","import { Button, Stack, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { Plate } from 'src/shared/Plate';\n\nimport { operationsData } from '../../Operations/constants';\nimport { Operation } from '../../Operations/Operation';\nimport { filterTransactions } from '../../utils';\n\nimport { TransactionsFilter } from './Filters';\n\nimport { SearchTransactions } from './Search';\n\nconst MIN_TRANSACTION_SUM = 0;\nconst MAX_TRANSACTION_SUM = 1000000;\n\nexport const TransactionHistory = () => {\n    const [searchInput, setSearchInput] = useState('');\n    const [transactions, setTransactions] = useState(operationsData);\n    const [isFiltersVisible, setIsFiltersVisible] = useState(false);\n    const [status, setStatus] = useState('all');\n    const [minValue, setMinValue] = useState(MIN_TRANSACTION_SUM);\n    const [maxValue, setMaxValue] = useState(MAX_TRANSACTION_SUM);\n\n    const handleResetToDefault = () => {\n        setIsFiltersVisible(false);\n        setTransactions(operationsData);\n        setMinValue(MIN_TRANSACTION_SUM);\n        setMaxValue(MAX_TRANSACTION_SUM);\n        setSearchInput('');\n        setStatus('all');\n    };\n\n    useEffect(() => {\n        const foundTransactions = filterTransactions(searchInput, operationsData);\n        setTransactions(foundTransactions);\n    }, [searchInput]);\n\n    useEffect(() => {\n        if (status === 'all') {\n            setTransactions(operationsData.filter((item) => item.sum >= minValue && item.sum <= maxValue));\n        } else {\n            const filteredTransactions = [...operationsData]\n                .filter((item) => item.typeName === status)\n                .filter((item) => item.sum >= minValue && item.sum <= maxValue);\n            setTransactions(filteredTransactions);\n        }\n    }, [status, minValue, maxValue]);\n\n    return (\n        <Stack sx={{ width: '500px' }}>\n            {!isFiltersVisible && (\n                <SearchTransactions\n                    inputValue={searchInput}\n                    onOpenClick={() => {\n                        setIsFiltersVisible(true);\n                        setSearchInput('');\n                    }}\n                    onInputChange={(e) => {\n                        setSearchInput(e.target.value);\n                    }}\n                    onClearInputClick={() => {\n                        setSearchInput('');\n                    }}\n                />\n            )}\n            <Stack sx={{ mt: '24px' }}>\n                {isFiltersVisible && (\n                    <TransactionsFilter\n                        onClearClick={handleResetToDefault}\n                        onShowResultsClick={() => setIsFiltersVisible(false)}\n                        onToggleStatus={(status: string) => setStatus(status)}\n                        onSliderClick={(minValue: number, maxValue: number) => {\n                            setMinValue(minValue);\n                            setMaxValue(maxValue);\n                        }}\n                        resultsLength={transactions.length}\n                        minValue={MIN_TRANSACTION_SUM}\n                        maxValue={MAX_TRANSACTION_SUM}\n                        activeFilter={status}\n                    />\n                )}\n                {!isFiltersVisible &&\n                    (transactions.length ? (\n                        <Stack spacing={2}>\n                            {transactions.slice(0, 10).map((item) => (\n                                <Operation\n                                    key={item.transferOrderID}\n                                    date={item.createadAt}\n                                    payeeId={item.payeeId}\n                                    sum={item.sum}\n                                    typeName={item.typeName}\n                                    currencyCode={item.currencyCode}\n                                />\n                            ))}\n                        </Stack>\n                    ) : (\n                        <Stack justifyContent=\"center\" spacing={2}>\n                            <Plate message=\"Нет подходящих транзакций, пожалуйста, введите другие данные.\" />\n                            <Button variant=\"primary\" onClick={handleResetToDefault}>\n                                <Typography>Вернуться к списку транзакций</Typography>\n                            </Button>\n                        </Stack>\n                    ))}\n            </Stack>\n        </Stack>\n    );\n};\n","import { useState, useMemo } from 'react';\n\nimport { useAppSelector } from 'src/redux/hooks';\nimport { selectClientId } from 'src/redux/selectors';\n\nimport { useParams, Link as RouterLink } from 'react-router-dom';\n\nimport { useGetClientsCreditCardsQuery } from 'src/redux/apis/creditService';\nimport { useGetClientsDepositCardsQuery } from 'src/redux/apis/depositService';\n\nimport { Plate } from 'src/shared/Plate';\nimport { Box, Stack, Typography, Button, Link, Tab } from '@mui/material';\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\n\nimport { ComingSoonModal } from 'src/shared/ComingSoonModal';\nimport { PaymentCard } from 'src/shared/cards/Payment';\nimport { BackArrowButton } from 'src/shared/BackArrowButton';\n\nimport { AppRoutes } from 'src/constants';\n\nimport { colors } from 'src/theme';\nimport { separateStringByN } from 'src/utils/inputFormatters';\n\nimport { InfoTable } from 'src/shared/InfoTable';\n\nimport { cardDateFormatter } from '../../utils';\n\nimport { TransactionHistory } from './TransactionHistory';\n\nconst tabValues = ['Информация', 'История', 'Управление'];\n\nexport const CardDetails = () => {\n    const clientId = useAppSelector(selectClientId);\n    const { id = '' } = useParams();\n\n    const {\n        data: creditCards,\n        isError: creditCardsError,\n        isLoading: creditCardsLoading,\n    } = useGetClientsCreditCardsQuery(clientId);\n\n    const {\n        data: debitCards,\n        isError: debitCardsError,\n        isLoading: debitCardsLoading,\n    } = useGetClientsDepositCardsQuery(clientId);\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [tabValue, setTabValue] = useState(tabValues[0]);\n\n    const isCredit = creditCards?.find((el) => el.id === id);\n    const isDebit = debitCards?.find((el) => el.id === id);\n\n    const card = isCredit ? isCredit : isDebit;\n\n    const handleOpen = () => {\n        setIsOpen(true);\n    };\n\n    const handleClose = () => {\n        setIsOpen(false);\n    };\n\n    const handleTabChange = (event: React.SyntheticEvent, newTabValue: string) => {\n        setTabValue(newTabValue);\n    };\n\n    const cardTableData = useMemo(() => {\n        return card\n            ? [\n                  {\n                      id: 1,\n                      title: 'Статус',\n                      info: card.status === 'ACTIVE' ? 'Активна' : 'Неактивна',\n                      copyButton: false,\n                  },\n                  {\n                      id: 2,\n                      title: 'Cрок действия',\n                      info: cardDateFormatter(card.expirationDate),\n                      copyButton: false,\n                  },\n                  { id: 3, title: 'Номер карты', info: separateStringByN(card.cardNumber, 4), copyButton: true },\n                  { id: 4, title: 'Держатель карты', info: card.holderName, copyButton: true },\n                  { id: 5, title: 'Номер счёта', info: separateStringByN(card.accountNumber, 4), copyButton: true },\n                  { id: 6, title: 'Валюта карты', info: card.currencyCode, copyButton: false },\n              ]\n            : null;\n    }, [card]);\n\n    if (creditCardsError || debitCardsError) {\n        return <Plate message=\"Произошла ошибка\" />;\n    }\n\n    if (debitCardsLoading || creditCardsLoading) {\n        return <Plate message=\"Загружаем ваши данные\" />;\n    }\n\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                alignItems: 'flex-start',\n                gap: '48px',\n                padding: { tablet: '0 36px', mobile: '0 24px' },\n            }}\n        >\n            <Link component={RouterLink} to={AppRoutes.accountsRoute} underline=\"none\">\n                <BackArrowButton sx={{ color: colors.primary, svg: { color: colors.primary } }} />\n            </Link>\n\n            {card === undefined ? (\n                <Plate message=\"Нет информации по данной карте\" />\n            ) : (\n                <Stack spacing=\"56px\" alignItems=\"flex-start\">\n                    <Stack spacing=\"24px\">\n                        <Typography variant=\"subtitle2Semibold\" sx={{ lineHeight: '30px' }}>\n                            {card.cardName}\n                        </Typography>\n                        <PaymentCard\n                            key={card.id}\n                            type={isCredit ? 'credit' : 'debit'}\n                            currency={card.currencyCode}\n                            currentBalance={card.balance}\n                            cardNumber={card.cardNumber}\n                            expirationDate={card.expirationDate}\n                            paymentSystem={card.paymentSystem}\n                            size=\"large\"\n                        />\n                        <Button variant=\"primary\" onClick={handleOpen}>\n                            Перевести с карты на карту\n                        </Button>\n                    </Stack>\n                    <TabContext value={tabValue}>\n                        <TabList\n                            sx={{\n                                minHeight: 'auto',\n                                '.MuiTabs-indicator': {\n                                    laptop: {\n                                        background: colors.secondary200,\n                                        height: '3px',\n                                        borderRadius: '10px',\n                                        display: 'block',\n                                    },\n                                    mobile: { display: 'none' },\n                                },\n                                '.MuiTabs-flexContainer': {\n                                    borderBottom: `1px solid ${colors.neutral200}`,\n                                },\n                            }}\n                            onChange={handleTabChange}\n                        >\n                            {tabValues.map((el) => (\n                                <Tab\n                                    sx={{\n                                        p: '0 0 2px 0',\n                                        textTransform: 'none',\n                                        minWidth: '150px',\n                                        minHeight: 'auto',\n                                        '&:hover': {\n                                            color: colors.primary,\n                                        },\n\n                                        '&.Mui-selected': {\n                                            color: `${colors.primary} !important`,\n                                        },\n                                    }}\n                                    label={<Typography variant=\"descriptionSemiBold\">{el}</Typography>}\n                                    value={el}\n                                    key={el}\n                                />\n                            ))}\n                        </TabList>\n                        <TabPanel sx={{ p: 0, mt: '32px !important' }} value={tabValues[0]}>\n                            <InfoTable data={cardTableData} />\n                        </TabPanel>\n                        <TabPanel sx={{ p: 0, mt: '8px !important', width: '100%' }} value={tabValues[1]}>\n                            <TransactionHistory />\n                        </TabPanel>\n                    </TabContext>\n                </Stack>\n            )}\n\n            <ComingSoonModal isOpen={isOpen} onClose={handleClose} />\n        </Box>\n    );\n};\n","import { Box, Typography, Stack, useTheme } from '@mui/material';\nimport { FC } from 'react';\nimport { currencyData } from 'src/services/exchangeRatesService/currencyData';\n\nimport { colors } from 'src/theme';\n\nimport { operationTypeImg, operationTypeLabel, operationTypeSum } from '../constants';\nimport { balanceFormatter, operationDateFormatter, operationTitleFormatter } from '../utils';\n\nexport type OperationProps = {\n    date: string;\n    payeeId: string;\n    sum: number;\n    typeName: string;\n    currencyCode: string;\n};\n\nexport const Operation: FC<OperationProps> = ({ date, payeeId, sum, typeName, currencyCode }) => {\n    const theme = useTheme();\n    return (\n        <Box\n            sx={{\n                padding: {\n                    tablet: '0 0 10px',\n                    mobile: '0 0 8px',\n                },\n                display: 'flex',\n                justifyContent: 'space-between',\n                '&:not(:last-child)': {\n                    borderBottom: `1px solid ${colors.neutral200}`,\n                },\n            }}\n        >\n            <Stack direction=\"row\" spacing={1}>\n                <Box\n                    component=\"img\"\n                    src={operationTypeImg[typeName as keyof typeof operationTypeImg]}\n                    alt=\"operation type\"\n                    sx={{ alignSelf: 'flex-start' }}\n                />\n                <Stack>\n                    <Typography\n                        variant=\"descriptionRegular\"\n                        sx={{\n                            color: colors.primary,\n                            [theme.breakpoints.down('tablet')]: {\n                                width: '154px',\n                                fontSize: '14px',\n                                lineHeight: '20px',\n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis',\n                                whiteSpace: 'nowrap',\n                            },\n                        }}\n                    >\n                        {operationTitleFormatter(payeeId, typeName)}\n                    </Typography>\n                    <Typography\n                        variant=\"labelRegular12\"\n                        sx={{\n                            fontSize: '14px',\n                            lineHeight: '20px',\n                            color: colors.neutral600,\n                            [theme.breakpoints.down('tablet')]: { fontSize: '12px', lineHeight: '16px' },\n                        }}\n                    >\n                        {operationTypeLabel[typeName as keyof typeof operationTypeLabel]}\n                    </Typography>\n                </Stack>\n            </Stack>\n            <Stack sx={{ alignItems: 'flex-end' }}>\n                <Stack\n                    direction=\"row\"\n                    spacing={1}\n                    sx={{ color: typeName === 'incoming' ? colors.secondary600 : colors.primary }}\n                >\n                    <Typography variant=\"descriptionSemiBold\">\n                        {operationTypeSum[typeName as keyof typeof operationTypeSum]}\n                        {balanceFormatter(sum, 'operation')}\n                        {' ' + currencyData[currencyCode as keyof typeof currencyData].symbol}\n                    </Typography>\n                </Stack>\n                <Typography\n                    variant=\"labelRegular12\"\n                    sx={{\n                        fontSize: '14px',\n                        lineHeight: '20px',\n                        color: colors.neutral600,\n                        textAlign: 'right',\n                        whiteSpace: 'nowrap',\n                        [theme.breakpoints.down('tablet')]: {\n                            fontSize: '12px',\n                            lineHeight: '16px',\n                        },\n                    }}\n                >\n                    {operationDateFormatter(date)}\n                </Typography>\n            </Stack>\n        </Box>\n    );\n};\n","export type mockOperationsData = {\n    transferOrderID: string;\n    createadAt: string;\n    purpose: string;\n    payeeId: string;\n    sum: number;\n    completedAt: string;\n    status: string;\n    typeName: string;\n    currencyCode: string;\n}[];\n\nexport const operationsData: mockOperationsData = [\n    {\n        transferOrderID: '0',\n        createadAt: '2023-02-09 07:01:54+00',\n        purpose: 'own account transfer',\n        payeeId: 'internal',\n        sum: 4600,\n        completedAt: '2022-12-08 7:01:54+00',\n        status: 'completed',\n        typeName: 'internal',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '1',\n        createadAt: '2023-02-08 05:56:54+00',\n        purpose: 'interbank transfer',\n        payeeId: 'Алексей Алексеев',\n        sum: 10000,\n        completedAt: '2022-12-08 05:56:54+00',\n        status: 'completed',\n        typeName: 'incoming',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '2',\n        createadAt: '2023-01-15 16:30:54+00',\n        purpose: 'interbank transfer',\n        payeeId: 'withdraw',\n        sum: 5000,\n        completedAt: '2022-12-07 16:30:54+00',\n        status: 'completed',\n        typeName: 'withdraw',\n        currencyCode: 'RUB',\n    },\n\n    {\n        transferOrderID: '3',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 2799,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '4',\n        createadAt: '2022-06-26: 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 2099,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '5',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 584,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n\n    {\n        transferOrderID: '6',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 799,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '7',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 1499,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '8',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 1299,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '8',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Dodo Pizza',\n        sum: 967,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '9',\n        createadAt: '2023-01-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Спортмастер',\n        sum: 32799,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '10',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Лента',\n        sum: 5555,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '11',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Пятерочка',\n        sum: 1999,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n    {\n        transferOrderID: '11',\n        createadAt: '2022-06-26 17:09:54+00',\n        purpose: 'purchase',\n        payeeId: 'Магнит',\n        sum: 1299,\n        completedAt: '2022-06-26 17:09:54+00',\n        status: 'completed',\n        typeName: 'purchase',\n        currencyCode: 'RUB',\n    },\n];\n","import { BeforeMaskedStateChangeStates } from 'react-input-mask';\n\nconst getIsStartNumber = (startSymbol: string): boolean => {\n    switch (startSymbol) {\n        case '8':\n            return true;\n        case '9':\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport function beforeMaskedStateChange({ nextState, currentState }: BeforeMaskedStateChangeStates) {\n    let { value } = nextState;\n    let selection = nextState.selection;\n    const cursorPosition = selection ? selection.start : null;\n    const lengthWithPlusSeven = 30;\n    const lengthWithEightOrNine = 29;\n\n    const startValueWithPlusSeven = currentState.value.slice(4, 6) === '+7';\n\n    const startSymbol = currentState.value.slice(4, 5);\n\n    const isStartNumber = getIsStartNumber(startSymbol);\n\n    if (currentState.value.length === lengthWithPlusSeven && startValueWithPlusSeven) {\n        value = currentState.value.slice(4, 16);\n    }\n    if (currentState.value.length === lengthWithEightOrNine && isStartNumber) {\n        value = '+7' + currentState.value.slice(5, 15);\n    }\n    if (cursorPosition && !value.includes('_')) {\n        selection = { start: value.length, end: value.length };\n    }\n\n    return {\n        value,\n        selection,\n    };\n}\n","import React, { useState } from 'react';\nimport InputMask from 'react-input-mask';\n\nimport { FormControl, FormHelperText, InputBase, InputLabel, InputBaseProps } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport { DeleteIcon, ShowPassIcon, HidePassIcon } from 'src/shared/icons';\nimport { colors } from 'src/theme';\n\nimport { beforeMaskedStateChange } from './utils';\n\ntype MyInputProps = InputBaseProps & {\n    id: string;\n    label?: string;\n    value?: string;\n    type: string;\n    mask?: string;\n    helperText?: string | boolean;\n    isClearable?: boolean;\n    onClear?: VoidFunction;\n    defaultMaskedValue?: string;\n};\n\nexport const CustomInput = ({\n    id,\n    label,\n    value,\n    type,\n    error,\n    helperText,\n    isClearable,\n    onClear,\n    mask,\n    onChange,\n    defaultMaskedValue = '',\n    ...rest\n}: MyInputProps) => {\n    const [isCapslockOn, setIsCapslockOn] = useState<boolean>(false);\n    const [isShowPassword, setShowPassword] = useState(false);\n    const theme = useTheme();\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        setIsCapslockOn(e.getModifierState('CapsLock'));\n    };\n    const handleTogglePasswordClick = () => {\n        setShowPassword(!isShowPassword);\n    };\n\n    const passwordShowButton = isShowPassword ? (\n        <HidePassIcon data-testid={`${id}-hideIcon`} onClick={handleTogglePasswordClick} sx={{ cursor: 'pointer' }} />\n    ) : (\n        <ShowPassIcon data-testid={`${id}-showIcon`} onClick={handleTogglePasswordClick} sx={{ cursor: 'pointer' }} />\n    );\n\n    const endAdornmentAttributes =\n        value && isClearable && value !== defaultMaskedValue ? (\n            <DeleteIcon data-testid={`${id}-deleteIcon`} onMouseDown={onClear} sx={{ cursor: 'pointer' }} />\n        ) : !isClearable && type === 'password' ? (\n            passwordShowButton\n        ) : (\n            rest.endAdornment\n        );\n\n    const style = {\n        'label + &': {\n            marginTop: 3,\n        },\n        '&.MuiInputBase-root': {\n            [theme.breakpoints.down('tablet')]: {\n                fontSize: '14px',\n                lineHeight: '24px',\n            },\n            height: '44px',\n            borderRadius: '4px',\n            border: `1px solid ${colors.neutral400}`,\n            fontSize: 16,\n            padding: '10px 16px',\n            fontFamily: 'SF Pro Display, sans-serif',\n            '&.Mui-error': {\n                border: `1px solid ${colors.alert}`,\n            },\n            '&.Mui-focused': {\n                border: `1px solid ${colors.neutral600}`,\n                '&.Mui-error': {\n                    border: `1px solid ${colors.alert}`,\n                },\n            },\n        },\n    };\n\n    const combinedHelperText = helperText || (isCapslockOn && 'Включен CapsLock');\n    return mask ? (\n        <InputMask\n            mask={mask}\n            maskPlaceholder=\"_\"\n            alwaysShowMask={true}\n            onChange={onChange}\n            type={type}\n            beforeMaskedStateChange={type === 'tel' ? beforeMaskedStateChange : undefined}\n        >\n            <FormControl variant=\"standard\">\n                <InputLabel shrink={true} htmlFor={id}>\n                    {label}\n                </InputLabel>\n                <InputBase\n                    id={id}\n                    aria-describedby={`${id}-helper-text`}\n                    error={error}\n                    value={value || defaultMaskedValue}\n                    onKeyDown={handleKeyPress}\n                    {...rest}\n                    endAdornment={endAdornmentAttributes}\n                    inputProps={{ ...rest.inputProps }}\n                    sx={style}\n                />\n                <FormHelperText error={error} id={`${id}-helper-text`} data-testid={`${id}-helpText`}>\n                    {helperText}\n                </FormHelperText>\n            </FormControl>\n        </InputMask>\n    ) : (\n        <FormControl fullWidth={rest.fullWidth} variant=\"standard\">\n            <InputLabel shrink={true} htmlFor={id}>\n                {label}\n            </InputLabel>\n            <InputBase\n                id={id}\n                aria-describedby={`${id}-helper-text`}\n                value={value}\n                type={type === 'password' && isShowPassword ? 'text' : type}\n                onChange={onChange}\n                error={error || isCapslockOn}\n                onKeyDown={handleKeyPress}\n                {...rest}\n                endAdornment={endAdornmentAttributes}\n                inputProps={{ ...rest.inputProps }}\n                sx={style}\n                data-testid={`${id}-inputWrap`}\n            />\n            <FormHelperText error={error || isCapslockOn} id={`${id}-helper-text`} data-testid={`${id}-helpText`}>\n                {combinedHelperText}\n            </FormHelperText>\n        </FormControl>\n    );\n};\n","import { ToggleButton as MuiToggleButton } from '@mui/material';\nimport { colors } from 'src/theme';\n\ntype ToggleButtonProps = {\n    isActiveToggle: boolean;\n    value: string;\n    onToggle: (event: React.MouseEvent<HTMLElement>, status: string) => void;\n    title: string;\n    icon?: React.ReactNode;\n};\n\nexport const ToggleButton = ({ isActiveToggle, value, onToggle, title, icon }: ToggleButtonProps) => {\n    return (\n        <MuiToggleButton\n            selected={isActiveToggle}\n            disableRipple={true}\n            value={value}\n            onChange={onToggle}\n            sx={{\n                color: colors.neutral600,\n                border: 'none',\n                borderRadius: '4px',\n                background: colors.neutral100,\n                padding: '8px 12px',\n                textTransform: 'none',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: '8px',\n\n                '&.Mui-selected': {\n                    background: colors.secondary200,\n                    color: colors.primary,\n\n                    '&:hover': {\n                        background: colors.secondary200,\n                        color: colors.primary,\n                    },\n                },\n            }}\n        >\n            {!!icon && icon}\n            {title}\n        </MuiToggleButton>\n    );\n};\n"],"names":["sumFormatter","sum","String","replace","filters","value","title","TransactionsFilter","_ref","onClearClick","onShowResultsClick","onToggleStatus","onSliderClick","resultsLength","minValue","maxValue","activeFilter","_useState","useState","_useState2","_slicedToArray","setValue","handleToggleButton","event","status","getValueText","_jsxs","Stack","sx","padding","width","children","_jsx","Button","variant","onClick","alignSelf","m","Box","display","flexWrap","gap","map","el","ToggleButton","isActiveToggle","onToggle","direction","alignItems","spacing","divider","Typography","marginTop","index","CustomInput","id","type","Slider","getAriaLabel","valueLabelDisplay","onChange","newValue","getAriaValueText","max","color","colors","SearchTransactions","onOpenClick","onInputChange","onClearInputClick","inputValue","pointerEvents","startAdornment","SearchIcon","viewBox","height","marginRight","marginLeft","placeholder","isClearable","onClear","fullWidth","IconButton","disableRipple","background","mt","FiltersIcon","MAX_TRANSACTION_SUM","TransactionHistory","searchInput","setSearchInput","_useState3","operationsData","_useState4","transactions","setTransactions","_useState5","_useState6","isFiltersVisible","setIsFiltersVisible","_useState7","_useState8","setStatus","_useState9","_useState10","setMinValue","_useState11","_useState12","setMaxValue","handleResetToDefault","useEffect","foundTransactions","filterTransactions","item","filteredTransactions","_toConsumableArray","filter","typeName","e","target","length","slice","Operation","date","createadAt","payeeId","currencyCode","transferOrderID","justifyContent","Plate","message","tabValues","CardDetails","clientId","useAppSelector","selectClientId","_useParams$id","useParams","_useGetClientsCreditC","useGetClientsCreditCardsQuery","creditCards","data","creditCardsError","isError","creditCardsLoading","isLoading","_useGetClientsDeposit","useGetClientsDepositCardsQuery","debitCards","debitCardsError","debitCardsLoading","isOpen","setIsOpen","tabValue","setTabValue","isCredit","find","isDebit","card","cardTableData","useMemo","info","copyButton","cardDateFormatter","expirationDate","separateStringByN","cardNumber","holderName","accountNumber","tablet","mobile","Link","component","RouterLink","to","AppRoutes","underline","BackArrowButton","svg","undefined","lineHeight","cardName","PaymentCard","currency","currentBalance","balance","paymentSystem","size","TabContext","TabList","minHeight","laptop","borderRadius","borderBottom","concat","newTabValue","Tab","p","textTransform","minWidth","label","TabPanel","InfoTable","ComingSoonModal","onClose","theme","useTheme","src","operationTypeImg","alt","_defineProperty","breakpoints","down","fontSize","overflow","textOverflow","whiteSpace","operationTitleFormatter","operationTypeLabel","operationTypeSum","balanceFormatter","currencyData","symbol","textAlign","operationDateFormatter","purpose","completedAt","beforeMaskedStateChange","nextState","currentState","selection","cursorPosition","start","startValueWithPlusSeven","isStartNumber","startSymbol","getIsStartNumber","includes","end","_MuiInputBaseRoot","error","helperText","mask","_ref$defaultMaskedVal","defaultMaskedValue","rest","_objectWithoutProperties","_excluded","isCapslockOn","setIsCapslockOn","isShowPassword","setShowPassword","handleKeyPress","getModifierState","handleTogglePasswordClick","passwordShowButton","HidePassIcon","cursor","ShowPassIcon","endAdornmentAttributes","DeleteIcon","onMouseDown","endAdornment","style","border","combinedHelperText","InputMask","maskPlaceholder","alwaysShowMask","FormControl","InputLabel","shrink","htmlFor","InputBase","_objectSpread","onKeyDown","inputProps","FormHelperText","icon","MuiToggleButton","selected"],"sourceRoot":""}